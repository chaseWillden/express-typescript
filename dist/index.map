{"version":3,"sources":["../src/AsyncMiddleware.ts","../src/ResponseError.ts","../src/AppRouter.ts","../src/Server.ts","../src/index.ts","../src/Injector.ts","../src/RouteStore.ts","../src/RouteDecorator.ts","../src/decorators.ts","TestBusiness.ts","../src/MethodDecorators.ts","TestRoute.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../test","sourcesContent":["/**\n * This snippet is from\n * https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016\n */\nconst asyncMiddleware = (fn) => (\n  (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next)\n  }\n)\n\nexport default asyncMiddleware\n","export default class ResponseError<T> {\n  status: number\n  data: T\n\n  constructor(status: number, data: T) {\n    this.status = status\n    this.data = data\n  }\n}\n","import { Router, Request, Response as ExpressResponse, NextFunction } from 'express'\nimport asyncMiddleware from './AsyncMiddleware'\nimport { KeyValuePair } from './Types'\nimport ResponseError from './ResponseError'\n\nexport class AppRouter {\n  router: Router\n\n  routes = {\n    GET: {},\n    POST: {},\n    PATCH: {},\n    PUT: {},\n    DELETE: {}\n  }\n\n  constructor() {\n    this.router = new Router()\n  }\n\n  /**\n   * Process the route\n   * @param req \n   * @param res \n   * @param next \n   */\n  async processRoute(req: Request, res: ExpressResponse, next: NextFunction) {\n    const { params, query, body } = req\n    const method = req.method.toUpperCase()\n    const route = req.route.path\n    const callbackMethod = this.routes[method]\n\n    if (!callbackMethod[route]) {\n      throw new Error(`${route} not found`)\n    }\n\n    try {\n      const callback = callbackMethod[route]\n      const results = await callback(params, query, body, { req, res })\n      res.status(200).send(results)\n    } catch (ex) {\n      if (ex instanceof ResponseError) {\n        res.status(ex.status).send(ex.data)\n      } else {\n        res.status(500).send(ex.message)\n      }\n    }\n  }\n\n  /**\n   * Perform a get request\n   * @param path\n   * @param callback\n   */\n  getRequest(path: string, callback: (params: KeyValuePair, query: KeyValuePair, body: any) => void) {\n    this.routes.GET[path] = callback\n    this.router.get(path, asyncMiddleware(this.processRoute.bind(this)))\n  }\n\n  /**\n   * Perform a post request\n   * @param path \n   * @param callback \n   */\n  postRequest(path: string, callback: (params: KeyValuePair, query: KeyValuePair, body: any) => void) {\n    this.routes.POST[path] = callback\n    this.router.post(path, asyncMiddleware(this.processRoute.bind(this)))\n  }\n\n  /**\n   * Perform a delete request\n   * @param path \n   * @param callback \n   */\n  deleteRequest(path: string, callback: (params: KeyValuePair, query: KeyValuePair, body: any) => void) {\n    this.router.DELETE[path] = callback\n    this.router.delete(path, asyncMiddleware(this.processRoute.bind(this)))\n  }\n\n  /**\n   * Perform a put request\n   * @param path \n   * @param callback \n   */\n  putRequest(path: string, callback: (params: KeyValuePair, query: KeyValuePair, body: any) => void) {\n    this.router.PUT[path] = callback\n    this.router.put(path, asyncMiddleware(this.processRoute.bind(this)))\n  }\n\n  /**\n   * Perform a patch request\n   * @param path \n   * @param callback \n   */\n  patchRequest(path: string, callback: (params: KeyValuePair, query: KeyValuePair, body: any) => void) {\n    this.router.PATCH[path] = callback\n    this.router.patch(path, asyncMiddleware(this.processRoute.bind(this)))\n  }  \n}\n","import express from 'express'\nimport { AppRouter } from './AppRouter'\n\ninterface IOptions {\n  port: number\n}\n\nconst defaultOptions: IOptions = {\n  port: 3030\n}\n\nclass Server {\n  app: any\n  \n  private options: IOptions\n\n  constructor(options: IOptions = defaultOptions) {\n    this.app = express()\n    this.options = options\n    this.app.set('port', options.port)\n  }\n\n  run() {\n    console.log(`Listening on port ${this.options.port}`)\n    this.app.listen(this.options.port)\n  }\n\n  /**\n   * Register a new express route\n   * @param route \n   */\n  registerRoute(route: any | any[]) {\n    // Ignore on purpose, just need it imported\n  }\n\n  /**\n   * Register a new route\n   * @param routePath the route the path will be\n   * @param route the route extended from app router\n   */\n  __registerRoute__(routePath: string, route: AppRouter) {\n    this.app.use(routePath, route.router)\n  }\n}\n\nexport const server = new Server()\n","export * from './AppRouter'\nexport * from './Server'","import 'reflect-metadata'\nimport { IType } from './Decorators'\n\n/**\n * The Injector stores services and resolves requested instances.\n */\nexport class Injector {\n  /**\n   * Resolves instances by injecting required services\n   * @param {IType<any>} target\n   * @returns {T}\n   */\n  static resolve<T>(target: IType<any>): T {\n    // tokens are required dependencies, while injections are resolved tokens from the Injector\n    const tokens = Reflect.getMetadata('design:paramtypes', target) || []\n    const injections = tokens.map(token => Injector.resolve<any>(token))\n\n    return new target(...injections)\n  }\n}\n","import { AppRouter } from './AppRouter'\nimport { IType } from './decorators'\nimport { Injector } from './Injector'\nimport asyncMiddleware from './AsyncMiddleware'\nimport { server } from './Server'\n\ninterface IStoreItem {\n  path: string\n  propertyName: string\n  method: string\n}\n\nclass RouteStore {\n  route: {[key: string]: IStoreItem[]} = {}\n  registered: {[key: string]: boolean} = {}\n\n  /**\n   * Add a class to express\n   * @param target\n   * @param path\n   */\n  addClass(target: IType<AppRouter>, path: string) {\n    if (this.registered[path]) {\n      console.warn(path + ' already registered')\n      return\n    }\n\n    const instance = Injector.resolve(target) as any\n\n    const className = target.name\n    const items = this.route[className]\n\n    if (!items) {\n      console.warn('No routes registered with ' + className)\n      return\n    } else {\n      for (const item of items) {\n        const method = instance[item.propertyName] as () => void\n\n        if (!method) {\n          continue\n        }\n\n        const instanceRouter = instance as AppRouter\n        instanceRouter.routes[item.method]['/' + item.path] = method.bind(instance)\n        instanceRouter.router[item.method.toLowerCase()](\n          '/' + item.path,\n          asyncMiddleware(instanceRouter.processRoute.bind(instanceRouter)))\n      }\n    }\n\n    server.__registerRoute__(this.cleanUpRoutePath(path), instance as AppRouter)\n    this.registered[path] = true\n  }\n\n  /**\n   * Add a route to express\n   * @param className\n   * @param path\n   * @param propertyName\n   */\n  addRoute(className: string, path: string, propertyName: string, method: string) {\n    if (!this.route[className]) {\n      this.route[className] = []\n    }\n\n    this.route[className].push({\n      path,\n      propertyName,\n      method,\n    })\n  }\n\n  /**\n   * Cleanup route path\n   * @param path \n   */\n  private cleanUpRoutePath(path: string) {\n    if (path && path[0] === '/') {\n      return path\n    }\n\n    return '/' + path\n  }\n}\n\nconst routeStore = new RouteStore()\n\nexport default routeStore\n","import routeStore from './RouteStore'\nimport { GenericClassDecorator, IType } from './decorators'\n\n/**\n * Registering a route for express\n * @param path\n */\nexport const Route = (path: string = ''): GenericClassDecorator<IType<any>> => {\n  return (target: IType<any>) => {\n    routeStore.addClass(target, path)\n  }\n}\n","import 'reflect-metadata'\n// import EventListener from './event-listener'\n\n/**\n * Type for what object is instances of\n */\nexport interface IType<T> {\n  new(...args: any[]): T\n}\n\n/**\n * Generic `ClassDecorator` type\n */\nexport type GenericClassDecorator<T> = (target: T) => void\n\n/**\n * Generic 'property descriptor' type\n */\nexport type GenericPropertyDecorator<T> = (target: T, propertyKey: string, descriptor: PropertyDescriptor) => void\n\n/**\n * Generic 'parameter descriptor' type\n */\nexport type GenericParameterDecorator<T> = (target: T, propertyKey: string, index: number) => void\n\n/**\n * @returns {GenericClassDecorator<Type<any>>}\n * @constructor\n */\nexport const Inject = (target: IType<any>) => {\n  // Ignore\n  // EventListener.addListener(target)\n}\n\n/**\n * Is required field\n */\n// export declare function Required(target: any, propertyName: string, propertyDescriptor?: PropertyDescriptor): void;\n\nexport function Required(target: any, propertyName: string, propertyDescriptor?: PropertyDescriptor): void {\n// Ignore\n}\n","import { Inject } from '../src/decorators'\n\n@Inject\nexport class TestBusiness {\n  getData() {\n    return 'data'\n  }\n}","import { GenericPropertyDecorator } from './decorators'\nimport routeStore from './RouteStore'\n\n/**\n * Registering a route for express\n * @param path\n */\nexport const Get = (path: string = ''): GenericPropertyDecorator<any> => {\n  return (target, propertyKey: string, descriptor: PropertyDescriptor) => {\n    routeStore.addRoute(target.constructor.name, path, propertyKey, 'GET')\n  }\n}\n\n/**\n * Registering a route for express\n * @param path\n */\nexport const Post = (path: string = ''): GenericPropertyDecorator<any> => {\n  return (target, propertyKey: string, descriptor: PropertyDescriptor) => {\n    routeStore.addRoute(target.constructor.name, path, propertyKey, 'POST')\n  }\n}\n\n/**\n * Registering a route for express\n * @param path\n */\nexport const Delete = (path: string = ''): GenericPropertyDecorator<any> => {\n  return (target, propertyKey: string, descriptor: PropertyDescriptor) => {\n    routeStore.addRoute(target.constructor.name, path, propertyKey, 'DELETE')\n  }\n}\n\n/**\n * Registering a route for express\n * @param path\n */\nexport const Patch = (path: string = ''): GenericPropertyDecorator<any> => {\n  return (target, propertyKey: string, descriptor: PropertyDescriptor) => {\n    routeStore.addRoute(target.constructor.name, path, propertyKey, 'PATCH')\n  }\n}\n","import { AppRouter } from '../src/AppRouter'\nimport { Route } from '../src/RouteDecorator'\nimport { TestBusiness } from './TestBusiness'\nimport { Get } from '../src/MethodDecorators'\n\n@Route('test')\nexport default class TestRoute extends AppRouter {\n  constructor(\n    private testBusiness: TestBusiness\n  ) { \n    super()\n  }\n\n  @Get('b')\n  async getData() {\n    return this.testBusiness.getData()\n  }\n}","import { server } from '../src'\nimport TestRoute from './TestRoute'\n\nserver.registerRoute(TestRoute)\n\nserver.run()"]}